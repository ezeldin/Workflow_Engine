// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workflow.API.DbContexts;

namespace Workflow.API.Migrations
{
    [DbContext(typeof(WorkflowContext))]
    [Migration("20210908102223_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorkFlow.API.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStepId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NextStepId")
                        .HasColumnType("int");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("NextStepId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = 201,
                            ActionTypeId = 1,
                            CurrentStepId = 100,
                            Name = "",
                            NextStepId = 101,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 202,
                            ActionTypeId = 2,
                            CurrentStepId = 101,
                            Name = "",
                            NextStepId = 102,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 203,
                            ActionTypeId = 4,
                            CurrentStepId = 101,
                            Name = "",
                            NextStepId = 105,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 204,
                            ActionTypeId = 3,
                            CurrentStepId = 101,
                            Name = "",
                            NextStepId = 100,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 205,
                            ActionTypeId = 8,
                            CurrentStepId = 101,
                            Name = "",
                            NextStepId = 102,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 206,
                            ActionTypeId = 2,
                            CurrentStepId = 102,
                            Name = "",
                            NextStepId = 103,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 208,
                            ActionTypeId = 3,
                            CurrentStepId = 102,
                            Name = "",
                            NextStepId = 100,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 209,
                            ActionTypeId = 8,
                            CurrentStepId = 102,
                            Name = "",
                            NextStepId = 103,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 207,
                            ActionTypeId = 4,
                            CurrentStepId = 102,
                            Name = "",
                            NextStepId = 105,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 210,
                            ActionTypeId = 2,
                            CurrentStepId = 103,
                            Name = "",
                            NextStepId = 104,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 211,
                            ActionTypeId = 4,
                            CurrentStepId = 103,
                            Name = "",
                            NextStepId = 105,
                            Order = (short)0
                        },
                        new
                        {
                            Id = 212,
                            ActionTypeId = 3,
                            CurrentStepId = 103,
                            Name = "",
                            NextStepId = 100,
                            Order = (short)0
                        });
                });

            modelBuilder.Entity("WorkFlow.API.Entities.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Submit",
                            Name = "Submit"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Approve",
                            Name = "Approve"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Return",
                            Name = "Return"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Reject",
                            Name = "Reject"
                        },
                        new
                        {
                            Id = 5,
                            Code = "UnderReview",
                            Name = "Under Review"
                        },
                        new
                        {
                            Id = 6,
                            Code = "ApproveForSubmission",
                            Name = "Approve For Submission"
                        },
                        new
                        {
                            Id = 7,
                            Code = "RecommendForApproval",
                            Name = "Recommend For Approval"
                        },
                        new
                        {
                            Id = 8,
                            Code = "RecommendForRejection",
                            Name = "Recommend for rejection"
                        });
                });

            modelBuilder.Entity("WorkFlow.API.Entities.Process", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FirstStepId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstStepId = 100,
                            Name = "",
                            Order = (short)0
                        });
                });

            modelBuilder.Entity("WorkFlow.API.Entities.ProcessInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentStepId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessInstances");
                });

            modelBuilder.Entity("WorkFlow.API.Entities.Step", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("StepTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("StepTypeId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 9
                        },
                        new
                        {
                            Id = 101,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 6
                        },
                        new
                        {
                            Id = 102,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 7
                        },
                        new
                        {
                            Id = 103,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 8
                        },
                        new
                        {
                            Id = 104,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 3
                        },
                        new
                        {
                            Id = 105,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 4
                        },
                        new
                        {
                            Id = 106,
                            Name = "",
                            Order = (short)0,
                            ProcessId = 1,
                            StepTypeId = 5
                        });
                });

            modelBuilder.Entity("WorkFlow.API.Entities.StepType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StepTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Draft",
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Code = "InProgress",
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Approved",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Rejected",
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Canceled",
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 6,
                            Code = "Assessor",
                            Name = "Assessor"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Endorser",
                            Name = "Endorser"
                        },
                        new
                        {
                            Id = 8,
                            Code = "Approver",
                            Name = "Approver"
                        },
                        new
                        {
                            Id = 9,
                            Code = "Initiator",
                            Name = "Initiator"
                        },
                        new
                        {
                            Id = 10,
                            Code = "CommitteeReview",
                            Name = "Committee Review"
                        });
                });

            modelBuilder.Entity("Workflow.API.Entities.ActionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ActionsHistory");
                });

            modelBuilder.Entity("Workflow.API.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProcessInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Workflow.API.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Claim Request"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Modify Bill Request"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cancel Bill Request"
                        });
                });

            modelBuilder.Entity("WorkFlow.API.Entities.Action", b =>
                {
                    b.HasOne("WorkFlow.API.Entities.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlow.API.Entities.Step", "CurrentStep")
                        .WithMany("Actions")
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlow.API.Entities.Step", "NextStep")
                        .WithMany()
                        .HasForeignKey("NextStepId");

                    b.Navigation("ActionType");

                    b.Navigation("CurrentStep");

                    b.Navigation("NextStep");
                });

            modelBuilder.Entity("WorkFlow.API.Entities.ProcessInstance", b =>
                {
                    b.HasOne("WorkFlow.API.Entities.Step", "Step")
                        .WithMany()
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlow.API.Entities.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("WorkFlow.API.Entities.Step", b =>
                {
                    b.HasOne("WorkFlow.API.Entities.Process", "Process")
                        .WithMany("Steps")
                        .HasForeignKey("ProcessId");

                    b.HasOne("WorkFlow.API.Entities.StepType", "StepType")
                        .WithMany()
                        .HasForeignKey("StepTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("StepType");
                });

            modelBuilder.Entity("Workflow.API.Entities.ActionHistory", b =>
                {
                    b.HasOne("WorkFlow.API.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkFlow.API.Entities.ProcessInstance", "ProcessInstance")
                        .WithMany("ActionsHistory")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("ProcessInstance");
                });

            modelBuilder.Entity("Workflow.API.Entities.Request", b =>
                {
                    b.HasOne("WorkFlow.API.Entities.ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.API.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessInstance");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("WorkFlow.API.Entities.Process", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("WorkFlow.API.Entities.ProcessInstance", b =>
                {
                    b.Navigation("ActionsHistory");
                });

            modelBuilder.Entity("WorkFlow.API.Entities.Step", b =>
                {
                    b.Navigation("Actions");
                });
#pragma warning restore 612, 618
        }
    }
}
